// Code generated by sqlc. DO NOT EDIT.
// source: bugs.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const countBugs = `-- name: CountBugs :one
SELECT count(*) FROM Bugs
`

func (q *Queries) CountBugs(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countBugsStmt, countBugs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBug = `-- name: CreateBug :one
INSERT INTO Bugs (
    Title, Bug_Description, Component_ID, Author_ID, Created_At
) VALUES (
    $1, $2, $3, $4, NOW()
)
RETURNING id, title, created_at, edited_at, bug_description, bug_severity, bug_status, component_id, author_id
`

type CreateBugParams struct {
	Title          sql.NullString `json:"title"`
	BugDescription sql.NullString `json:"bug_description"`
	ComponentID    int64          `json:"component_id"`
	AuthorID       int64          `json:"author_id"`
}

func (q *Queries) CreateBug(ctx context.Context, arg CreateBugParams) (Bug, error) {
	row := q.queryRow(ctx, q.createBugStmt, createBug,
		arg.Title,
		arg.BugDescription,
		arg.ComponentID,
		arg.AuthorID,
	)
	var i Bug
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.EditedAt,
		&i.BugDescription,
		&i.BugSeverity,
		&i.BugStatus,
		&i.ComponentID,
		&i.AuthorID,
	)
	return i, err
}

const deleteBug = `-- name: DeleteBug :exec
DELETE FROM Bugs
    WHERE ID = $1
`

func (q *Queries) DeleteBug(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteBugStmt, deleteBug, id)
	return err
}

const editDescription = `-- name: EditDescription :exec
UPDATE Bugs
    SET Bug_Description = $2,
        Edited_At = NOW()
    WHERE ID = $1
`

type EditDescriptionParams struct {
	ID             int64          `json:"id"`
	BugDescription sql.NullString `json:"bug_description"`
}

func (q *Queries) EditDescription(ctx context.Context, arg EditDescriptionParams) error {
	_, err := q.exec(ctx, q.editDescriptionStmt, editDescription, arg.ID, arg.BugDescription)
	return err
}

const editSeverity = `-- name: EditSeverity :exec
UPDATE Bugs
    SET Bug_Severity = $2,
        Edited_At = NOW()
    WHERE ID = $1
`

type EditSeverityParams struct {
	ID          int64    `json:"id"`
	BugSeverity Severity `json:"bug_severity"`
}

func (q *Queries) EditSeverity(ctx context.Context, arg EditSeverityParams) error {
	_, err := q.exec(ctx, q.editSeverityStmt, editSeverity, arg.ID, arg.BugSeverity)
	return err
}

const editStatus = `-- name: EditStatus :exec
UPDATE Bugs
    SET Bug_Status = $2,
        Edited_At = NOW()
    WHERE ID = $1
`

type EditStatusParams struct {
	ID        int64  `json:"id"`
	BugStatus Status `json:"bug_status"`
}

func (q *Queries) EditStatus(ctx context.Context, arg EditStatusParams) error {
	_, err := q.exec(ctx, q.editStatusStmt, editStatus, arg.ID, arg.BugStatus)
	return err
}

const listBugs = `-- name: ListBugs :many
SELECT id, title, created_at, edited_at, bug_description, bug_severity, bug_status, component_id, author_id FROM Bugs
    ORDER BY ID
    LIMIT $1 OFFSET $2
`

type ListBugsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBugs(ctx context.Context, arg ListBugsParams) ([]Bug, error) {
	rows, err := q.query(ctx, q.listBugsStmt, listBugs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bug
	for rows.Next() {
		var i Bug
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.EditedAt,
			&i.BugDescription,
			&i.BugSeverity,
			&i.BugStatus,
			&i.ComponentID,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const relocateBug = `-- name: RelocateBug :exec
UPDATE Bugs
    SET Component_ID = $2,
        Edited_At = NOW()
    WHERE ID = $1
`

type RelocateBugParams struct {
	ID          int64 `json:"id"`
	ComponentID int64 `json:"component_id"`
}

func (q *Queries) RelocateBug(ctx context.Context, arg RelocateBugParams) error {
	_, err := q.exec(ctx, q.relocateBugStmt, relocateBug, arg.ID, arg.ComponentID)
	return err
}

const requires = `-- name: Requires :many
SELECT id, title, created_at, edited_at, bug_description, bug_severity, bug_status, component_id, author_id, required_by, depends_on
FROM Bugs
INNER JOIN Bug_Dependencies
    ON Bugs.ID = Bug_Dependencies.Required_By
    WHERE Bugs.ID = $1
`

type RequiresRow struct {
	ID             int64          `json:"id"`
	Title          sql.NullString `json:"title"`
	CreatedAt      time.Time      `json:"created_at"`
	EditedAt       sql.NullTime   `json:"edited_at"`
	BugDescription sql.NullString `json:"bug_description"`
	BugSeverity    Severity       `json:"bug_severity"`
	BugStatus      Status         `json:"bug_status"`
	ComponentID    int64          `json:"component_id"`
	AuthorID       int64          `json:"author_id"`
	RequiredBy     int64          `json:"required_by"`
	DependsOn      int64          `json:"depends_on"`
}

func (q *Queries) Requires(ctx context.Context, id int64) ([]RequiresRow, error) {
	rows, err := q.query(ctx, q.requiresStmt, requires, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RequiresRow
	for rows.Next() {
		var i RequiresRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.EditedAt,
			&i.BugDescription,
			&i.BugSeverity,
			&i.BugStatus,
			&i.ComponentID,
			&i.AuthorID,
			&i.RequiredBy,
			&i.DependsOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const whatRequires = `-- name: WhatRequires :many
SELECT id, title, created_at, edited_at, bug_description, bug_severity, bug_status, component_id, author_id, required_by, depends_on
FROM Bugs
INNER JOIN Bug_Dependencies
    ON Bugs.ID = Bug_Dependencies.Depends_On
    WHERE Bugs.ID = $1
`

type WhatRequiresRow struct {
	ID             int64          `json:"id"`
	Title          sql.NullString `json:"title"`
	CreatedAt      time.Time      `json:"created_at"`
	EditedAt       sql.NullTime   `json:"edited_at"`
	BugDescription sql.NullString `json:"bug_description"`
	BugSeverity    Severity       `json:"bug_severity"`
	BugStatus      Status         `json:"bug_status"`
	ComponentID    int64          `json:"component_id"`
	AuthorID       int64          `json:"author_id"`
	RequiredBy     int64          `json:"required_by"`
	DependsOn      int64          `json:"depends_on"`
}

func (q *Queries) WhatRequires(ctx context.Context, id int64) ([]WhatRequiresRow, error) {
	rows, err := q.query(ctx, q.whatRequiresStmt, whatRequires, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WhatRequiresRow
	for rows.Next() {
		var i WhatRequiresRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.EditedAt,
			&i.BugDescription,
			&i.BugSeverity,
			&i.BugStatus,
			&i.ComponentID,
			&i.AuthorID,
			&i.RequiredBy,
			&i.DependsOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
