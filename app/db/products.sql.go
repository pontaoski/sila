// Code generated by sqlc. DO NOT EDIT.
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO Products (
    Name, Product_Description, Active
) VALUES (
    $1, $2, $3
)
RETURNING id, name, product_description, active
`

type CreateProductParams struct {
	Name               sql.NullString `json:"name"`
	ProductDescription sql.NullString `json:"product_description"`
	Active             sql.NullBool   `json:"active"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.queryRow(ctx, q.createProductStmt, createProduct, arg.Name, arg.ProductDescription, arg.Active)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductDescription,
		&i.Active,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM Products
    WHERE ID=$1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteProductStmt, deleteProduct, id)
	return err
}

const editProduct = `-- name: EditProduct :exec
UPDATE Products
    SET Name = $2,
        Product_Description = $3
    WHERE ID = $1
`

type EditProductParams struct {
	ID                 int64          `json:"id"`
	Name               sql.NullString `json:"name"`
	ProductDescription sql.NullString `json:"product_description"`
}

func (q *Queries) EditProduct(ctx context.Context, arg EditProductParams) error {
	_, err := q.exec(ctx, q.editProductStmt, editProduct, arg.ID, arg.Name, arg.ProductDescription)
	return err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, product_description, active FROM Products
    ORDER BY ID
    LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.query(ctx, q.listProductsStmt, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductDescription,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
